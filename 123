# Generate the corrected version of the provided script with only the required fixes applied
from datetime import datetime

filename = f"mythic_fixed_final_{datetime.now().strftime('%Y%m%d_%H%M%S')}.sh"

fixed_script = """#!/bin/bash

set -euo pipefail

log() { echo -e "\\e[94m[+] $1\\e[0m"; }
warn() { echo -e "\\e[93m[!] $1\\e[0m"; }
error() { echo -e "\\e[91m[‚úò] $1\\e[0m"; }

trap 'error "Script failed at line $LINENO. Exiting."' ERR

# === CLEANUP ===
log "Cleaning previous installs..."
sudo rm -rf ~/Mythic ~/.mythic ~/offensive-tools || true
sudo docker system prune -af || true
sudo apt-get remove -y docker docker.io containerd runc || true
sudo apt-get autoremove -y || true

# === UPDATE SYSTEM ===
log "Updating system..."
sudo apt-get update -y || warn "Update failed"
sudo apt-get upgrade -y || warn "Upgrade failed"

# === INSTALL DEPS ===
log "Installing dependencies..."
sudo apt-get install -y \\
    curl wget git unzip build-essential \\
    apt-transport-https ca-certificates gnupg lsb-release \\
    python3 python3-pip software-properties-common lynx || error "Dependency install failed"

# === INSTALL DOCKER ===
log "Installing Docker..."
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \\
    sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \\
https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \\
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update -y
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-buildx-plugin
sudo usermod -aG docker "$USER"
sudo systemctl enable docker
sudo systemctl start docker

# === CLONE MYTHIC ===
log "Cloning Mythic..."
sudo env GIT_ASKPASS=true git clone https://github.com/its-a-feature/Mythic.git ~/Mythic || error "Mythic clone failed"
cd ~/Mythic || error "Mythic dir not found"

./install_docker_ubuntu.sh || warn "Docker helper script failed"

# === SET CREDENTIALS ===
log "Injecting admin credentials into .env"
grep -q MYTHIC_ADMIN_USER .env && sed -i 's/^MYTHIC_ADMIN_USER=.*/MYTHIC_ADMIN_USER="mythic_admin"/' .env || echo 'MYTHIC_ADMIN_USER="mythic_admin"' >> .env
grep -q MYTHIC_ADMIN_PASSWORD .env && sed -i 's/^MYTHIC_ADMIN_PASSWORD=.*/MYTHIC_ADMIN_PASSWORD="admin123"/' .env || echo 'MYTHIC_ADMIN_PASSWORD="admin123"' >> .env

# === MYTHIC CLI SETUP ===
log "Setting up mythic-cli..."
pip3 install -r mythic-cli/requirements.txt || error "mythic-cli pip install failed"

if ! grep -q mythic-cli ~/.bashrc; then
    echo 'export PATH=$PATH:~/Mythic/mythic-cli' >> ~/.bashrc
    export PATH=$PATH:~/Mythic/mythic-cli
fi

# === AGENTS ===
log "Installing agents..."
AGENT_URLS=(
  "https://github.com/MythicAgents/poseidon"
  "https://github.com/MythicAgents/apollo"
  "https://github.com/MythicAgents/athena"
  "https://github.com/MythicAgents/xenon"
  "https://github.com/MythicAgents/medusa"
  "https://github.com/MythicAgents/thanatos"
  "https://github.com/MythicAgents/hannibal"
  "https://github.com/MythicAgents/venus"
  "https://github.com/MythicAgents/ghostwriter"
  "https://github.com/MythicAgents/nemesis"
  "https://github.com/MythicAgents/bloodhound"
  "https://github.com/MythicAgents/sliver"
)

for url in "${AGENT_URLS[@]}"; do
  ./mythic-cli/mythic-cli install github "$url" || warn "Agent install failed: $url"
done

# === C2 PROFILES ===
log "Installing C2 profiles..."
C2_PROFILES=(
  "http" "httpx" "websocket" "dns" "dynamichttp"
  "smb" "tcp" "discord" "github" "slack" "dropbox" "twitter"
)

for profile in "${C2_PROFILES[@]}"; do
  ./mythic-cli/mythic-cli install c2-profile "$profile" || warn "C2 install failed: $profile"
done

# === TLS CERT ===
log "Creating self-signed HTTPS cert..."
mkdir -p ~/.mythic/certs
openssl req -x509 -newkey rsa:4096 -keyout ~/.mythic/certs/key.pem \\
    -out ~/.mythic/certs/cert.pem -days 365 -nodes -subj "/CN=localhost" || warn "TLS cert failed"

# === START MYTHIC ===
log "Starting Mythic..."
MYTHIC_SELF_SIGNED_CERT=true ./mythic-cli/mythic-cli start || error "Mythic failed to start"

# === OFFENSIVE TOOLS ===
log "Cloning offensive tools..."
mkdir -p ~/offensive-tools
cd ~/offensive-tools

TOOL_REPOS=(
  "https://github.com/PowerShellMafia/PowerSploit.git"
  "https://github.com/EmpireProject/Empire.git"
  "https://github.com/BC-SECURITY/Empire.git"
  "https://github.com/BloodHoundAD/BloodHound.git"
  "https://github.com/GhostPack/SharpHound.git"
  "https://github.com/GhostPack/Rubeus.git"
  "https://github.com/GhostPack/Seatbelt.git"
  "https://github.com/GhostPack/Certify.git"
)

for repo in "${TOOL_REPOS[@]}"; do
  sudo env GIT_ASKPASS=true git clone --depth=1 "$repo" || warn "Tool clone failed: $repo"
done

# === MIMIKATZ ===
log "Downloading Mimikatz..."
wget -nc https://github.com/gentilkiwi/mimikatz/releases/latest/download/mimikatz_trunk.zip -O mimikatz.zip || warn "Mimikatz download failed"
unzip -o mimikatz.zip -d mimikatz || warn "Unzip failed"

# === FINISH ===
IP=$(curl -s ifconfig.me || hostname -I | awk '{print $1}')
log "‚úÖ Mythic is running at: https://$IP:7443"
log "üë§ Login with: Username='mythic_admin' Password='admin123'"
log "üîÅ Use Lynx: lynx https://$IP:7443"
log "üì¶ Offensive tools at: ~/offensive-tools"
log "üß† Reload CLI: source ~/.bashrc"
"""

# Save it
with open(f"/mnt/data/{filename}", "w") as f:
    f.write(fixed_script)

filename
