# Save a fully corrected Mythic installer script that handles all previous issues
from datetime import datetime

filename = f"mythic_auto_rebuild_{datetime.now().strftime('%Y%m%d_%H%M%S')}.sh"

final_script = """#!/bin/bash

set -euo pipefail

log() { echo -e "\\e[94m[+] $1\\e[0m"; }
warn() { echo -e "\\e[93m[!] $1\\e[0m"; }
error() { echo -e "\\e[91m[âœ˜] $1\\e[0m"; }

trap 'error "Script failed at line $LINENO. Exiting."' ERR

ADMIN_USER="mythic_admin"
ADMIN_PASS="admin123"

# === CLEANUP ===
log "Cleaning previous installs..."
sudo rm -rf ~/Mythic ~/.mythic ~/offensive-tools || true
sudo docker system prune -af || true
sudo apt-get remove -y docker docker.io containerd runc || true
sudo apt-get autoremove -y || true

# === UPDATE SYSTEM ===
log "Updating system..."
sudo apt-get update -y || warn "Update failed"
sudo apt-get upgrade -y || warn "Upgrade failed"

# === INSTALL DEPS ===
log "Installing dependencies..."
sudo apt-get install -y curl wget git unzip build-essential apt-transport-https ca-certificates gnupg lsb-release python3 python3-pip software-properties-common lynx || error "Dependency install failed"

# === INSTALL DOCKER ===
log "Installing Docker..."
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update -y
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-buildx-plugin
sudo usermod -aG docker "$USER"
sudo systemctl enable docker
sudo systemctl start docker

# === CLONE MYTHIC ===
log "Cloning Mythic..."
git clone https://github.com/its-a-feature/Mythic.git ~/Mythic || error "Mythic clone failed"
cd ~/Mythic || error "Mythic dir not found"

log "Running Mythic install script..."
./install_docker_ubuntu.sh || warn "Docker helper script failed"

# === SET ADMIN CREDENTIALS IN .env ===
log "Configuring .env credentials for Mythic admin..."
grep -q MYTHIC_ADMIN_USER .env && sed -i 's/^MYTHIC_ADMIN_USER=.*/MYTHIC_ADMIN_USER="\\"$ADMIN_USER\\""/' .env || echo "MYTHIC_ADMIN_USER=\\"$ADMIN_USER\\"" >> .env
grep -q MYTHIC_ADMIN_PASSWORD .env && sed -i 's/^MYTHIC_ADMIN_PASSWORD=.*/MYTHIC_ADMIN_PASSWORD="\\"$ADMIN_PASS\\""/' .env || echo "MYTHIC_ADMIN_PASSWORD=\\"$ADMIN_PASS\\"" >> .env

# === SETUP CLI ===
log "Installing mythic-cli dependencies..."
pip3 install -r mythic-cli/requirements.txt || warn "mythic-cli pip install failed"
echo 'export PATH=$PATH:~/Mythic/mythic-cli' >> ~/.bashrc
export PATH=$PATH:~/Mythic/mythic-cli

# === START MYTHIC ===
log "Starting Mythic for first-time setup..."
MYTHIC_SELF_SIGNED_CERT=true ./mythic-cli/mythic-cli start || error "Mythic start failed"

# === AGENTS ===
log "Installing Mythic agents..."
AGENTS=(
  "https://github.com/MythicAgents/poseidon"
  "https://github.com/MythicAgents/apollo"
  "https://github.com/MythicAgents/athena"
  "https://github.com/MythicAgents/xenon"
  "https://github.com/MythicAgents/medusa"
  "https://github.com/MythicAgents/thanatos"
  "https://github.com/MythicAgents/hannibal"
  "https://github.com/MythicAgents/venus"
  "https://github.com/MythicAgents/ghostwriter"
  "https://github.com/MythicAgents/nemesis"
  "https://github.com/MythicAgents/bloodhound"
  "https://github.com/MythicAgents/sliver"
)
for AGENT in "${AGENTS[@]}"; do
  ./mythic-cli/mythic-cli install github "$AGENT" || warn "Failed to install agent: $AGENT"
done

# === C2 PROFILES ===
log "Installing C2 profiles..."
C2S=(http httpx websocket dns dynamichttp smb tcp discord github slack dropbox twitter)
for C2 in "${C2S[@]}"; do
  ./mythic-cli/mythic-cli install c2-profile "$C2" || warn "Failed to install C2 profile: $C2"
done

# === TLS CERT ===
log "Creating self-signed TLS certificate..."
mkdir -p ~/.mythic/certs
openssl req -x509 -newkey rsa:4096 -keyout ~/.mythic/certs/key.pem -out ~/.mythic/certs/cert.pem -days 365 -nodes -subj "/CN=localhost" || warn "Cert generation failed"

# === OFFENSIVE TOOLS ===
log "Cloning offensive tools..."
mkdir -p ~/offensive-tools && cd ~/offensive-tools
TOOLS=(
  "https://github.com/PowerShellMafia/PowerSploit.git"
  "https://github.com/EmpireProject/Empire.git"
  "https://github.com/BC-SECURITY/Empire.git"
  "https://github.com/BloodHoundAD/BloodHound.git"
  "https://github.com/GhostPack/SharpHound.git"
  "https://github.com/GhostPack/Rubeus.git"
  "https://github.com/GhostPack/Seatbelt.git"
  "https://github.com/GhostPack/Certify.git"
)
for TOOL in "${TOOLS[@]}"; do
  git clone --depth=1 "$TOOL" || warn "Failed to clone $TOOL"
done

# === MIMIKATZ ===
log "Downloading Mimikatz..."
wget -nc https://github.com/gentilkiwi/mimikatz/releases/latest/download/mimikatz_trunk.zip -O mimikatz.zip || warn "Mimikatz download failed"
unzip -o mimikatz.zip -d mimikatz || warn "Mimikatz unzip failed"

# === DONE ===
IP=$(curl -s ifconfig.me || hostname -I | awk '{print $1}')
log "âœ… Mythic is ready at: https://$IP:7443"
log "ðŸ‘¤ Username: $ADMIN_USER"
log "ðŸ”‘ Password: $ADMIN_PASS"
log "ðŸ“¦ Offensive tools located at: ~/offensive-tools"
log "ðŸ§  Reload CLI with: source ~/.bashrc"
"""

# Save it to the data mount
with open(f"/mnt/data/{filename}", "w") as f:
    f.write(final_script)

filename
