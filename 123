#!/usr/bin/env python3

import os
import subprocess
import sys
from pathlib import Path

LOGFILE = "/root/mythic_install_log.txt"

def run(command, fail_msg, cwd=None):
    print(f"[+] Running: {command}")
    result = subprocess.run(command, shell=True, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    with open(LOGFILE, "a") as log:
        log.write(result.stdout.decode())
    if result.returncode != 0:
        print(f"[!] ERROR: {fail_msg}")
        sys.exit(1)

def purge_old():
    print("[*] Purging old Docker/Mythic installations...")
    run("systemctl stop docker || true", "Could not stop Docker")
    run("apt-get purge -y docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-buildx-plugin", "Failed to purge Docker")
    run("rm -rf /opt/Mythic /var/lib/docker /var/lib/containerd ~/.mythic", "Failed to remove old files")

def install_deps():
    print("[*] Installing dependencies...")
    run("apt-get update", "apt update failed")
    run("apt-get install -y git curl wget unzip gnupg2 software-properties-common python3-pip make lynx w3m", "Dependency install failed")

def install_docker():
    print("[*] Installing Docker 20.10.24...")
    run("mkdir -p /etc/apt/keyrings", "Failed to create keyrings dir")
    run("curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg", "Failed to add Docker GPG")
    run("""echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list""", "Failed to add Docker repo")
    run("apt-get update", "Failed to update with Docker repo")
    run("apt-get install -y docker-ce=5:20.10.24~3-0~ubuntu-jammy docker-ce-cli=5:20.10.24~3-0~ubuntu-jammy containerd.io docker-compose-plugin docker-buildx-plugin", "Docker install failed")
    run("systemctl enable docker && systemctl start docker", "Docker start failed")

def install_mythic():
    print("[*] Installing Mythic...")
    run("git clone https://github.com/its-a-feature/Mythic.git /opt/Mythic", "Failed to clone Mythic")
    run("pip3 install mythic-cli", "Failed to install mythic-cli")
    os.makedirs("/opt/Mythic/ssl", exist_ok=True)
    run("openssl req -newkey rsa:4096 -nodes -keyout /opt/Mythic/ssl/mythic.key -x509 -days 365 -out /opt/Mythic/ssl/mythic.crt -subj \"/C=US/ST=None/L=None/O=Mythic/CN=localhost\"", "Cert creation failed")

    env_vars = """
MYTHIC_SERVER_PORT=7443
MYTHIC_HTTPS=True
MYTHIC_HTTPS_CERT=/ssl/mythic.crt
MYTHIC_HTTPS_KEY=/ssl/mythic.key
""".strip()
    with open("/opt/Mythic/.env", "a") as env:
        env.write(f"\n{env_vars}\n")

def install_agents_and_profiles():
    print("[*] Installing Agents and C2 Profiles...")
    agents = [
        "poseidon", "apollo", "athena", "xenon", "apfell", "leviathan", "medusa",
        "thanatos", "hannibal", "venus", "ghostwriter", "nemesis", "bloodhound", "sliver"
    ]
    profiles = [
        "http", "httpx", "websocket", "dns", "dynamichttp", "smb", "tcp", "discord",
        "github", "slack", "dropbox", "twitter"
    ]
    for agent in agents:
        run(f"mythic-cli install github https://github.com/MythicAgents/{agent}", f"Agent install failed: {agent}", cwd="/opt/Mythic")
    for profile in profiles:
        run(f"mythic-cli install github https://github.com/MythicC2Profiles/{profile}", f"Profile install failed: {profile}", cwd="/opt/Mythic")

def download_offensive_tools():
    print("[*] Downloading Offensive Tools...")
    tools = {
        "mimikatz": "https://github.com/gentilkiwi/mimikatz.git",
        "SharpHound": "https://github.com/BloodHoundAD/SharpHound.git",
        "Rubeus": "https://github.com/GhostPack/Rubeus.git",
        "Seatbelt": "https://github.com/GhostPack/Seatbelt.git"
    }
    os.makedirs("/opt/tools", exist_ok=True)
    for name, url in tools.items():
        dest = f"/opt/tools/{name}"
        if not Path(dest).exists():
            run(f"git clone {url} {dest}", f"Failed to clone {name}")

def start_mythic():
    print("[*] Starting Mythic...")
    run("./mythic-cli start", "Mythic failed to start", cwd="/opt/Mythic")

def main():
    print("====== Mythic C2 Auto Installer ======")
    with open(LOGFILE, "w") as log:
        log.write("====== Mythic Installation Log ======\n")

    purge_old()
    install_deps()
    install_docker()
    install_mythic()
    install_agents_and_profiles()
    download_offensive_tools()
    start_mythic()

    print("\n[+] Mythic C2 setup is complete.")
    print(f"[+] Access web UI via CLI with: lynx https://localhost:7443")
    print(f"[+] Log saved to: {LOGFILE}")

if __name__ == "__main__":
    if os.geteuid() != 0:
        print("[!] Run this script as root: sudo python3 mythic_setup.py")
        sys.exit(1)
    main()
